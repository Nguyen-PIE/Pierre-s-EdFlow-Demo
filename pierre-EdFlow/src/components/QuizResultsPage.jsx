import { useState } from 'react';
import { useNavigate } from 'react-router-dom';


export default function QuizResultsPage() {
  const [flaggedForTeacher, setFlaggedForTeacher] = useState([]);
	const navigate = useNavigate();


  // Sample results data - this would come from the quiz
  const quizResults = {
    title: 'Marketing Strategies & Consumer Behavior',
    score: 68,
    totalQuestions: 5,
    correctAnswers: 3,
    timeSpent: '12:34',
    completedDate: new Date().toLocaleDateString()
  };


	const handleReturnToDashboard = () => {
			navigate('/student/subject/2');
	};

  const questionResults = [
    {
      id: 1,
      type: 'multiple-choice',
      question: 'What is the primary objective of a business?',
      userAnswer: 'To maximize profit',
      correctAnswer: 'To maximize profit',
      isCorrect: true,
      explanation: 'Correct! While businesses have multiple objectives, profit maximization is generally considered the primary objective as it ensures business survival and growth.'
    },
    {
      id: 2,
      type: 'short-answer',
      question: 'Explain the difference between internal and external stakeholders in a business.',
      userAnswer: 'Internal stakeholders work inside the company like employees. External stakeholders are outside like customers.',
      modelAnswer: 'Internal stakeholders are individuals or groups within the organization such as employees, managers, and owners who have direct involvement in business operations. External stakeholders are outside parties like customers, suppliers, government, and the community who are affected by business decisions but are not directly involved in operations.',
      isCorrect: false,
      markingCriteria: {
        maxMarks: 4,
        earnedMarks: 2,
        breakdown: [
          { criterion: 'Defines internal stakeholders with examples', marks: 1, earned: 1 },
          { criterion: 'Explains internal stakeholder involvement', marks: 1, earned: 0 },
          { criterion: 'Defines external stakeholders with examples', marks: 1, earned: 1 },
          { criterion: 'Explains external stakeholder relationship', marks: 1, earned: 0 }
        ]
      },
      feedback: 'Your answer identifies basic differences but lacks depth. You correctly identified employees and customers, but didn\'t explain the nature of their involvement or provide sufficient examples. Include more detail about "direct involvement" vs "affected by decisions".'
    },
    {
      id: 3,
      type: 'multiple-choice',
      question: 'Which of the following is NOT a function of management?',
      userAnswer: 'Marketing',
      correctAnswer: 'Marketing',
      isCorrect: true,
      explanation: 'Correct! The four main functions of management are Planning, Organizing, Leading, and Controlling. Marketing is a separate business function, not a management function.'
    },
    {
      id: 4,
      type: 'short-answer',
      question: 'Describe two advantages of operating as a sole trader.',
      userAnswer: 'You get all the money and you can make your own decisions without asking anyone.',
      modelAnswer: 'Key advantages include: (1) Complete control over business decisions and operations, allowing for quick decision-making and flexibility, and (2) The owner receives all profits generated by the business. Additionally, sole traders benefit from simplified legal requirements, lower setup costs, and greater privacy compared to companies.',
      isCorrect: false,
      markingCriteria: {
        maxMarks: 4,
        earnedMarks: 2,
        breakdown: [
          { criterion: 'First advantage clearly stated', marks: 1, earned: 1 },
          { criterion: 'First advantage explained with business terminology', marks: 1, earned: 0 },
          { criterion: 'Second advantage clearly stated', marks: 1, earned: 1 },
          { criterion: 'Second advantage explained with business terminology', marks: 1, earned: 0 }
        ]
      },
      feedback: 'You identified the correct advantages but need to use appropriate business terminology. Instead of "get all the money," use "receives all profits." Instead of "make your own decisions," explain "complete control over business operations."'
    },
    {
      id: 5,
      type: 'multiple-choice',
      question: 'What does CSR stand for in business?',
      userAnswer: 'Customer Service Relations',
      correctAnswer: 'Corporate Social Responsibility',
      isCorrect: false,
      explanation: 'Incorrect. CSR stands for Corporate Social Responsibility, which refers to a business\'s commitment to ethical practices and contributing positively to society and the environment.'
    }
  ];

  const toggleFlag = (questionId) => {
    if (flaggedForTeacher.includes(questionId)) {
      setFlaggedForTeacher(flaggedForTeacher.filter(id => id !== questionId));
    } else {
      setFlaggedForTeacher([...flaggedForTeacher, questionId]);
    }
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-gradient-to-r from-purple-600 to-pink-600 text-white py-12">
        <div className="max-w-5xl mx-auto px-6">
          <h1 className="text-4xl font-bold mb-2">Quiz Complete! üéâ</h1>
          <p className="text-purple-100">{quizResults.title}</p>
        </div>
      </div>

      {/* Score Summary Card */}
      <div className="max-w-5xl mx-auto px-6 -mt-8">
        <div className="bg-white rounded-2xl shadow-2xl p-8 mb-8">
          <div className="grid md:grid-cols-4 gap-6 text-center">
            <div>
              <div className={`text-5xl font-bold mb-2 ${
                quizResults.score >= 80 ? 'text-green-600' : 
                quizResults.score >= 60 ? 'text-yellow-600' : 'text-red-600'
              }`}>
                {quizResults.score}%
              </div>
              <div className="text-gray-600 text-sm">Overall Score</div>
            </div>
            <div>
              <div className="text-5xl font-bold text-purple-600 mb-2">
                {quizResults.correctAnswers}/{quizResults.totalQuestions}
              </div>
              <div className="text-gray-600 text-sm">Correct Answers</div>
            </div>
            <div>
              <div className="text-5xl font-bold text-blue-600 mb-2">{quizResults.timeSpent}</div>
              <div className="text-gray-600 text-sm">Time Spent</div>
            </div>
            <div>
              <div className="text-3xl font-bold text-gray-700 mb-2">
                {quizResults.score >= 80 ? 'Excellent! üåü' : 
                 quizResults.score >= 60 ? 'Good Job! üëç' : 'Keep Practicing üìö'}
              </div>
              <div className="text-gray-600 text-sm">Performance</div>
            </div>
          </div>
        </div>

        {/* Question by Question Review */}
        <div className="space-y-6 mb-8">
          <h2 className="text-2xl font-bold text-gray-800">Detailed Review</h2>
          
          {questionResults.map((result, index) => (
            <div key={result.id} className={`bg-white rounded-xl shadow-lg overflow-hidden border-l-4 ${
              result.isCorrect ? 'border-green-500' : 'border-red-500'
            }`}>
              {/* Question Header */}
              <div className="p-6">
                <div className="flex justify-between items-start mb-4">
                  <div className="flex-1">
                    <div className="flex items-center gap-3 mb-3">
                      <span className={`px-3 py-1 rounded-full text-sm font-semibold ${
                        result.isCorrect ? 'bg-green-100 text-green-700' : 'bg-red-100 text-red-700'
                      }`}>
                        {result.isCorrect ? '‚úì Correct' : '‚úó Incorrect'}
                      </span>
                      <span className="bg-purple-100 text-purple-700 px-3 py-1 rounded-full text-sm font-semibold">
                        Question {index + 1}
                      </span>
                      {result.type === 'short-answer' && result.markingCriteria && (
                        <span className="bg-blue-100 text-blue-700 px-3 py-1 rounded-full text-sm font-semibold">
                          {result.markingCriteria.earnedMarks}/{result.markingCriteria.maxMarks} marks
                        </span>
                      )}
                      {flaggedForTeacher.includes(result.id) && (
                        <span className="bg-yellow-100 text-yellow-700 px-3 py-1 rounded-full text-sm font-semibold">
                          üö© Flagged for Teacher
                        </span>
                      )}
                    </div>
                    <h3 className="text-xl font-bold text-gray-800 mb-4">{result.question}</h3>
                  </div>
                  <button
                    onClick={() => toggleFlag(result.id)}
                    className={`ml-4 px-4 py-2 rounded-lg font-semibold transition-all ${
                      flaggedForTeacher.includes(result.id)
                        ? 'bg-yellow-500 text-white hover:bg-yellow-600'
                        : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
                    }`}
                  >
                    {flaggedForTeacher.includes(result.id) ? 'Flagged for Teacher' : 'Flag with Teacher'}
                  </button>
                </div>

                {/* Your Answer */}
                <div className="mb-4">
                  <div className="font-semibold text-gray-700 mb-2">Your Answer:</div>
                  <div className={`p-4 rounded-lg ${
                    result.isCorrect ? 'bg-green-50 border border-green-200' : 'bg-red-50 border border-red-200'
                  }`}>
                    <p className="text-gray-800">{result.userAnswer}</p>
                  </div>
                </div>

                {/* Marking Criteria for Short Answer */}
                {result.type === 'short-answer' && result.markingCriteria && (
                  <div className="mb-4 bg-blue-50 border border-blue-200 rounded-lg p-4">
                    <div className="font-semibold text-blue-900 mb-3">Marking Criteria:</div>
                    <div className="space-y-2">
                      {result.markingCriteria.breakdown.map((item, idx) => (
                        <div key={idx} className="flex justify-between items-center">
                          <div className="flex items-center gap-2">
                            <div className={`w-2 h-2 rounded-full ${
                              item.earned === item.marks ? 'bg-green-500' : 
                              item.earned > 0 ? 'bg-yellow-500' : 'bg-red-500'
                            }`}></div>
                            <span className="text-sm text-gray-700">{item.criterion}</span>
                          </div>
                          <span className={`font-semibold text-sm ${
                            item.earned === item.marks ? 'text-green-600' : 'text-gray-600'
                          }`}>
                            {item.earned}/{item.marks}
                          </span>
                        </div>
                      ))}
                    </div>
                  </div>
                )}

                {/* Model Answer (only shown if incorrect) */}
                {!result.isCorrect && result.modelAnswer && (
                  <div className="mb-4">
                    <div className="font-semibold text-gray-700 mb-2">Model Answer:</div>
                    <div className="p-4 bg-green-50 border border-green-200 rounded-lg">
                      <p className="text-gray-800">{result.modelAnswer}</p>
                    </div>
                  </div>
                )}

                {/* Explanation/Feedback */}
                <div className="bg-purple-50 border border-purple-200 rounded-lg p-4">
                  <div className="font-semibold text-purple-900 mb-2">
                    {result.type === 'short-answer' ? 'Feedback:' : 'Explanation:'}
                  </div>
                  <p className="text-gray-700 leading-relaxed">
                    {result.feedback || result.explanation}
                  </p>
                </div>
              </div>
            </div>
          ))}
        </div>

        {/* Action Buttons */}
        <div className="flex gap-4 pb-12">
				<button onClick={handleReturnToDashboard} className="flex-1 bg-purple-600 hover:bg-purple-700 text-white px-8 py-4 rounded-lg font-semibold transition-all shadow-lg hover:shadow-xl">
					Return to Dashboard
				</button>
          <button className="flex-1 bg-gray-600 hover:bg-gray-700 text-white px-8 py-4 rounded-lg font-semibold transition-all">
            Review Mistakes
          </button>
        </div>

        {/* Flagged Questions Summary */}
        {flaggedForTeacher.length > 0 && (
          <div className="bg-yellow-50 border border-yellow-200 rounded-xl p-6 mb-8">
            <div className="flex items-start gap-3">
              <div className="text-3xl">üö©</div>
              <div className="flex-1">
                <h3 className="font-bold text-yellow-900 mb-2">Questions Flagged for Teacher Review</h3>
                <p className="text-yellow-800 text-sm mb-3">
                  You've flagged {flaggedForTeacher.length} question{flaggedForTeacher.length !== 1 ? 's' : ''} for your teacher to review. They will be notified and can provide additional feedback.
                </p>
                <div className="flex flex-wrap gap-2">
                  {flaggedForTeacher.map(id => (
                    <span key={id} className="bg-yellow-200 text-yellow-800 px-3 py-1 rounded-full text-sm font-semibold">
                      Question {id}
                    </span>
                  ))}
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}